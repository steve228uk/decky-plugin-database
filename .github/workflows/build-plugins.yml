name: Build Plugins

on:
  push:
    branches:
      - main
      - backend-builder
    paths:
      - "plugins/**"
      - ".github/workflows/build-plugins.yml"
  pull_request:
    branches: ['*']
  workflow_dispatch:
    inputs:
      upload:
        type: boolean
        description: Re-upload the plugins to the store

jobs:
  build:
    name: Build updated plugins
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      if: ${{ !env.ACT }}
      uses: actions/checkout@8230315d06ad95c617244d2f265d237a1682d445
      with:
        fetch-depth: 0
        submodules: "recursive"
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@210f4edecfff9e901066850eb306b947d09092bc
      with:
        sha: ${{ github.sha }}
        separator: ","
        files: |
          plugins/*
          .github/workflows/build-plugins.yml

    - name: Cache Docker images
      if: ${{ !env.ACT }}
      uses: satackey/action-docker-layer-caching@46d2c640b1d8ef50d185452ad6fb324e6bd1d052

    - name: Login to GitHub Container Registry
      run: |
        echo $GITHUB_TOKEN | docker login ghcr.io -u SteamDeckHomebrew --password-stdin
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Wait for other runs to complete
      if: ${{ !env.ACT }}
      uses: softprops/turnstyle@8db075d65b19bf94e6e8687b504db69938dc3c65
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Pull frontend builder image
      run: docker pull ghcr.io/steamdeckhomebrew/builder:latest

    - name: Pull backend builder image
      run: docker pull ghcr.io/steamdeckhomebrew/holo-base:latest

    - name: Log out of GitHub Container Registry
      run: |
        docker logout ghcr.io

    - name: Detect edited files/plugins
      id: list-files
      run: |
        pushd plugins
        files=()
        if [[ "${{ steps.changed-files.outputs.all_changed_files }}" == *".github/workflows/build-plugins.yml"* ]]; 
        then
          echo "Rebuilding all plugins due to workflow edit"
          for file in ./plugins/*; do
            files+=($(cut -d/ -f3 <<< $file))
          done
        else
          rest="${{ steps.changed-files.outputs.all_changed_files }}"
          while [ -n "$rest" ] ; do
            str=${rest%%,*}
            [ "$rest" = "${rest/,/}" ] && rest= || rest=${rest#*,}
            files+=($(cut -d/ -f2 <<< $str))
          done <<< "$files"
          printf "%s\n" "${files[@]}" | sort -u
        fi
        popd
        IFS=$'\n' sorted=($(sort -u <<<"${files[@]}"))
        unset $IFS
        echo "${sorted[@]}"
        echo edited_files=${sorted[@]} >> $GITHUB_OUTPUT
    
    - name: Build plugin backends
      run: |
        IFS=' ' read -ra files <<< "${{ steps.list-files.outputs.edited_files }}"
        pushd plugins
        for plugin in $(printf "%s\n" "${files[@]}" | sort -u); do
          pushd $plugin
          echo "Detecting backend for plugin $plugin"
          dockerfile_exists="false"
          entrypoint_exists="false"
          docker_name="backend-${plugin,,}"
          # [ -d $PWD/backend ] && echo "$(ls -lla $PWD/backend | grep Dockerfile)"
          [ -f $PWD/backend/Dockerfile ] && dockerfile_exists=true
          [ -f $PWD/backend/entrypoint.sh ] && entrypoint_exists=true
          # check for Dockerfile
          if [[ "$dockerfile_exists" == "true" ]]; then
            echo "Grabbing provided dockerfile."
            echo "Building provided Dockerfile."
            docker build -f $PWD/backend/Dockerfile -t "$docker_name" .
            mkdir -p /tmp/output/$plugin/backend/out
            # check entrypoint script exists
            if [[ "$entrypoint_exists" == "true" ]]; then
              echo "Running docker image "$docker_name" with provided entrypoint script."
              docker run --rm -i -v $PWD/backend:/backend -v /tmp/output/$plugin/backend/out:/backend/out --entrypoint /backend/entrypoint.sh "$docker_name"
              mkdir -p /tmp/output/$plugin/bin
              cp -r /tmp/output/$plugin/backend/out/. /tmp/output/$plugin/bin
            else
              echo "Running docker image "$docker_name" with entrypoint script specified in Dockerfile."
              docker run --rm -i -v $PWD/backend:/backend -v /tmp/output/$plugin/backend/out:/backend/out "$docker_name"
              mkdir -p /tmp/output/$plugin/bin
              cp -r /tmp/output/$plugin/backend/out/. /tmp/output/$plugin/bin
            fi
            docker image rm "$docker_name"
            echo "Built $plugin backend"
          # Dockerfile doesn't exist but entrypoint script does, run w/ default image
          elif [[ "$dockerfile_exists" == "false" && "$entrypoint_exists" == "true" ]]; then
            echo "Grabbing default docker image and using provided entrypoint script."
            docker run --rm -i -v $PWD/backend:/backend -v /tmp/output/$plugin/backend/out:/backend/out ghcr.io/steamdeckhomebrew/holo-base:latest
            mkdir -p /tmp/output/$plugin/bin
            cp /tmp/output/$plugin/backend/out/. /tmp/output/$plugin/bin
            echo "Built $plugin backend"
          else
            echo "Plugin $plugin does not have a backend"
          fi
          # ls -lla /tmp/output/$plugin
          popd
        done
        popd

    - name: Build plugin frontends
      run: |
        IFS=' ' read -ra files <<< "${{ steps.list-files.outputs.edited_files }}"
        pushd plugins
        for plugin in $(printf "%s\n" "${files[@]}" | sort -u); do
          pushd $plugin
          docker run --rm -i -v $PWD:/plugin -v /tmp/output/$plugin:/out ghcr.io/steamdeckhomebrew/builder:latest
          echo Built $plugin frontend
          ls -lla /tmp/output/$plugin
          popd
        done
        popd
        
    - name: Zip Plugins
      run: |
        shopt -s dotglob
        mkdir -p /tmp/zips/
        mkdir -p /tmp/output/
        redtext=$'\e[1;31m'
        end=$'\e[0m'
        pushd /tmp/output
        for abs_plugin in /tmp/output/*; do
          plugin=$(basename $abs_plugin)
          zipname=/tmp/zips/$(basename ${plugin}).zip
          echo $plugin

          # Names of the optional files (the license can either be called license or license.md, not both)
          # (head is there to take the first file, because we're assuming there's only a single license file)
          license="$(find $plugin -maxdepth 1 -type f \( -iname "license" -o -iname "license.md" \) -printf '%P\n' | head -n 1)"
          readme="$(find $plugin -maxdepth 1 -type f -iname 'readme.md' -printf '%P\n')"
          haspython="$(find $plugin -maxdepth 1 -type f -name '*.py' -printf '%P\n')"
          # Check if plugin has a bin folder, if so, add "bin" and it's contents to root dir
          hasbin="$(find $plugin -maxdepth 1 -type d -name 'bin' -printf '%P\n')"
          # Check if plugin has a defaults folder, if so, add "default" contents to root dir
          hasdefaults="$(find $plugin -maxdepth 1 -type d -name 'defaults' -printf '%P\n')"
          # Add required plugin files (and directory) to zip file
          echo "$plugin/dist $plugin/plugin.json $plugin/package.json"
          zip -r $zipname "$plugin/dist" "$plugin/plugin.json" "$plugin/package.json"
          if [ ! -z "$hasbin" ]; then
            echo "$plugin/bin"
            zip -r $zipname "$plugin/bin"
          fi

          if [ ! -z "$haspython" ]; then
            echo "$plugin/*.py"
            find $plugin -maxdepth 1 -type f -name '*.py' -exec zip -r $zipname {} \;
          fi

          if [ ! -z "$hasdefaults" ]; then
            export workingdir=$PWD
            cd $plugin/defaults
            export plugin="$plugin"
            export zipname="$zipname"
            if [ ! -f "defaults.txt" ]; then
              find . -mindepth 1 -type d,f -name '*' -exec sh -c '
                for object do
                  outdir="/tmp/output"
                  name="$(basename $object)"
                  sudo cp -r "$object" $outdir/$plugin/$name
                  cd $workingdir
                  zip -r $zipname $plugin/$name
                done
              ' find-sh {} + ;
            else
              if [[ ! "$plugin" =~ "plugin-template" ]]; then
                printf "${red}defaults.txt found in defaults folder, please remove either defaults.txt or the defaults folder.${end}\n"
              else
                printf "plugin template, allowing defaults.txt\n"
              fi
            fi
            cd "$workingdir"
          fi

          # Check if other files exist, and if they do, add them
          echo "license:$plugin/$license readme:$plugin/$readme"
          if [ ! -z "$license" ]; then
            zip -r $zipname "$plugin/$license"
          fi
          if [ ! -z "$readme" ]; then
            zip -r $zipname "$plugin/$readme"
          fi
        done
        popd

    - name: Upload Artifacts to Github
      if: ${{ !env.ACT }}
      uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8
      with:
        name: plugins
        path: /tmp/zips/*

    - name: Upload plugins
      if: ${{ !env.ACT && github.ref == 'refs/heads/main' && (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.upload)) }}
      run: |
        shopt -s dotglob
        for plugin in /tmp/output/*; do
          zipname=/tmp/zips/$(basename ${plugin}).zip
          pushd $plugin
          donotupload=$(jq -r '.publish | any(.tags[] == "dnu"; .)' ./plugin.json)
          if [[ "$donotupload" == "false" ]]; then
            curl -X POST -H "Authorization: ${PLUGIN_STORE_KEY}" -F "name=$(jq -r '.name' ./plugin.json)" -F "author=$(jq -r '.author' ./plugin.json)" -F "description=$(jq -r '.publish.description' ./plugin.json)" -F "tags=$(jq -r '.publish.tags|join(",")' ./plugin.json)" -F "version_name=$(jq -r '.version' ./package.json)" -F "image=$(jq -r '.publish.image' ./plugin.json)" -F "file=@${zipname}" https://plugins.deckbrew.xyz/__submit
          else
            echo "Plugin is designated as 'do not upload', likely a template or CI demonstration."
          fi
          popd
        done
      env:
        PLUGIN_STORE_KEY: ${{ secrets.PLUGIN_STORE_KEY }}
